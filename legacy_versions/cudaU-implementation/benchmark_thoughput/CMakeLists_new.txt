cmake_minimum_required(VERSION 3.10)
project(JPEGDecoder LANGUAGES CXX CUDA)

# Enable testing
enable_testing()

# Find CUDAToolkit explicitly
find_package(CUDAToolkit REQUIRED)

# Set CUDA standard
set(CMAKE_CUDA_STANDARD 17)

# Enable CUDA separable compilation
set(CMAKE_CUDA_SEPARABLE_COMPILATION ON)

# Add the CUDA source file (idct.cu) as an object library
add_library(parser_obj OBJECT ../src/parser.h)
set_target_properties(parser_obj PROPERTIES CUDA_SEPARABLE_COMPILATION ON)

# Explicitly set the CUDA library path (optional)
list(APPEND CMAKE_CUDA_IMPLICIT_LINK_DIRECTORIES "/usr/local/cuda/lib64")

# Add options for batch size and dataset path
option(BATCH_SIZE "Batch size for benchmark" 512)  # Default batch size
option(DATASET_PATH "Path to the dataset" "GPU-JPEG-Decoder/benchmarking_dataset_mini")  # Default dataset path

# Add executables (decoder and benchmark_test)
add_executable(decoder
    ../main.cpp
    ../src/parser.cu
    ../src/huffmanTree.cpp
    ../utils/stream.cpp
    ../utils/utils.cu
)

# Link the object file and CUDA runtime library to the decoder executable
target_link_libraries(decoder PRIVATE $<TARGET_OBJECTS:parser_obj> /usr/local/cuda/lib64/libcudart.so)

add_executable(benchmark_test
    benchmark.cu
    ../src/parser.cu
    ../src/huffmanTree.cpp
    ../utils/stream.cpp
    ../utils/utils.cu
)

# Link the object file and CUDA runtime library to the benchmark_test executable
target_link_libraries(benchmark_test PRIVATE $<TARGET_OBJECTS:parser_obj> /usr/local/cuda/lib64/libcudart.so)

# Include CUDA include directories
target_include_directories(decoder PRIVATE ${CUDAToolkit_INCLUDE_DIRS})
target_include_directories(benchmark_test PRIVATE ${CUDAToolkit_INCLUDE_DIRS})

# Link Google Benchmark library
set(BENCHMARK_ROOT "$ENV{HOME}/benchmark_install")
find_package(benchmark REQUIRED PATHS ${BENCHMARK_ROOT} NO_DEFAULT_PATH)
target_link_libraries(benchmark_test PRIVATE benchmark::benchmark)

# Register benchmark test with CTest
add_test(NAME benchmark COMMAND benchmark_test --batchsize ${BATCH_SIZE} --datasetpath ${DATASET_PATH})

# Set compiler options for Release configuration
set(CMAKE_BUILD_TYPE Release)
